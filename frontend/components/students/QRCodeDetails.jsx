"use client";

import { useQRCode } from "@/lib/api/studentService/qrCode";
import { FaTimes, FaPrint, FaFilePdf, FaQrcode } from "react-icons/fa";
import { useReactToPrint } from "react-to-print";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { useRef, useState } from "react";
import Image from "next/image";

const QRCodeDetails = ({ id, onClose, setOnClose }) => {
  const { data: qrcode, isLoading, isError } = useQRCode(id);
  const [isPrinting, setIsPrinting] = useState(false);
  const qrCodeRef = useRef(null);

  // Handle printing
  // const handlePrint = useReactToPrint({
  //   content: () => qrCodeRef.current,
  //   onBeforeGetContent: () => setIsPrinting(true),
  //   onAfterPrint: () => setIsPrinting(false),
  // });

  const handlePrint = useReactToPrint({
    content: () => {
      if (!qrCodeRef.current) {
        console.error("No content to print!");
        return null;
      }
      return qrCodeRef.current;
    },
    onBeforeGetContent: () => setIsPrinting(true),
    onAfterPrint: () => setIsPrinting(false),
  });
  

  // Handle PDF conversion (landscape mode)
  const handleDownloadPDF = () => {
    const input = qrCodeRef.current;
    html2canvas(input, { scale: 2 }).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF("landscape"); // Set PDF to landscape mode
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgProps = pdf.getImageProperties(imgData);
      const imgWidth = imgProps.width;
      const imgHeight = imgProps.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = (pdfHeight - imgHeight * ratio) / 2;
      pdf.addImage(imgData, "PNG", imgX, imgY, imgWidth * ratio, imgHeight * ratio);
      pdf.save(`QRCode_${qrcode.qrCodeId}.pdf`);
    });
  };

  if (isLoading) return <div className="text-center py-8">Loading...</div>;
  if (isError) return <div className="text-center py-8 text-red-600">Error fetching QR code details</div>;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className={`bg-white rounded-lg shadow-lg p-6 w-full max-w-2xl transform transition-all ${
        isPrinting ? "scale-100" : "scale-95 hover:scale-100"
      }`}>
        {/* Header - Not included in PDF/Print */}
        <div className="flex justify-between items-center mb-6 no-print">
          <h2 className="text-2xl font-bold flex items-center">
            <FaQrcode className="mr-2 text-blue-600" /> QR Code Details
          </h2>
          <button
            onClick={() => setOnClose(!onClose)}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <FaTimes className="h-6 w-6" />
          </button>
        </div>

        {/* Printable Content */}
        <div ref={qrCodeRef}>
          {/* QR Code Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">QR Code ID</label>
                <p className="text-gray-900 font-semibold">{qrcode.qrCodeId}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">School ID</label>
                <p className="text-gray-900 font-semibold">{qrcode.schoolId}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Class ID</label>
                <p className="text-gray-900 font-semibold">{qrcode.classId}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Section ID</label>
                <p className="text-gray-900 font-semibold">{qrcode.sectionId}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Generated Time</label>
                <p className="text-gray-900 font-semibold">
                  {new Date(qrcode.generatedTime).toLocaleString()}
                </p>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Expiry Time</label>
                <p className="text-gray-900 font-semibold">
                  {new Date(qrcode.expiryTime).toLocaleString()}
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Session Token</label>
                <p className="text-gray-900 font-semibold break-all">{qrcode.sessionToken}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Generated By</label>
                <p className="text-gray-900 font-semibold">{qrcode.generatedBy}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Status</label>
                <p
                  className={`text-sm font-semibold ${
                    qrcode.status === "ACTIVE" ? "text-green-600" : "text-red-600"
                  }`}
                >
                  {qrcode.status}
                </p>
              </div>
            </div>
          </div>

          {/* QR Code Image */}
          <div className="mt-6 flex justify-center">
            <Image
              src={`data:image/png;base64,${qrcode.qrCodePath}`}
              alt="QR Code"
              className="w-48 h-48 border-4 border-blue-100 rounded-lg shadow-md"
            />
          </div>
        </div>

        {/* Action Buttons - Not included in PDF/Print */}
        <div className="mt-8 flex justify-end space-x-4 no-print">
          {/* <button
            onClick={handlePrint}
            className="flex items-center bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors"
          >
            <FaPrint className="mr-2" /> Print
          </button> */}
          <button
            onClick={handlePrint}
            disabled={isLoading || !qrcode}
            className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
              isLoading || !qrcode
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-gray-100 text-gray-700 hover:bg-gray-200"
            }`}
          >
            <FaPrint className="mr-2" /> Print
          </button>
          <button
            onClick={handleDownloadPDF}
            className="flex items-center bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            <FaFilePdf className="mr-2" /> Download PDF
          </button>
        </div>
      </div>
    </div>
  );
};

export default QRCodeDetails;